{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#grupo","title":"Grupo","text":"<ol> <li>Pedro Ant\u00f4nio Silva</li> <li>Eric Andrei Lima Possato</li> <li></li> </ol>"},{"location":"#projetos","title":"Projetos","text":"<ul> <li> Classification</li> <li> Roteiro 2</li> <li> Roteiro 3</li> <li> Roteiro 4</li> <li> Projeto</li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":""},{"location":"notebooks/processing/","title":"Notebook 1","text":"In\u00a0[14]: Copied! <pre>import kagglehub\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nimport os\n</pre> import kagglehub import pandas as pd from sklearn.preprocessing import StandardScaler import os In\u00a0[15]: Copied! <pre># Download\npath = kagglehub.dataset_download(\"teejmahal20/airline-passenger-satisfaction\")\ndf = pd.read_csv(os.path.join(path, \"train.csv\"), index_col=0, header=0)\n</pre> # Download path = kagglehub.dataset_download(\"teejmahal20/airline-passenger-satisfaction\") df = pd.read_csv(os.path.join(path, \"train.csv\"), index_col=0, header=0) In\u00a0[16]: Copied! <pre>df.head()\n</pre> df.head() Out[16]: id Gender Customer Type Age Type of Travel Class Flight Distance Inflight wifi service Departure/Arrival time convenient Ease of Online booking ... Inflight entertainment On-board service Leg room service Baggage handling Checkin service Inflight service Cleanliness Departure Delay in Minutes Arrival Delay in Minutes satisfaction 0 70172 Male Loyal Customer 13 Personal Travel Eco Plus 460 3 4 3 ... 5 4 3 4 4 5 5 25 18.0 neutral or dissatisfied 1 5047 Male disloyal Customer 25 Business travel Business 235 3 2 3 ... 1 1 5 3 1 4 1 1 6.0 neutral or dissatisfied 2 110028 Female Loyal Customer 26 Business travel Business 1142 2 2 2 ... 5 4 3 4 4 4 5 0 0.0 satisfied 3 24026 Female Loyal Customer 25 Business travel Business 562 2 5 5 ... 2 2 5 3 1 4 2 11 9.0 neutral or dissatisfied 4 119299 Male Loyal Customer 61 Business travel Business 214 3 3 3 ... 3 3 4 4 3 3 3 0 0.0 satisfied <p>5 rows \u00d7 24 columns</p> In\u00a0[17]: Copied! <pre>#check nan values\nprint(df.isnull().sum())\n</pre> #check nan values print(df.isnull().sum()) <pre>id                                     0\nGender                                 0\nCustomer Type                          0\nAge                                    0\nType of Travel                         0\nClass                                  0\nFlight Distance                        0\nInflight wifi service                  0\nDeparture/Arrival time convenient      0\nEase of Online booking                 0\nGate location                          0\nFood and drink                         0\nOnline boarding                        0\nSeat comfort                           0\nInflight entertainment                 0\nOn-board service                       0\nLeg room service                       0\nBaggage handling                       0\nCheckin service                        0\nInflight service                       0\nCleanliness                            0\nDeparture Delay in Minutes             0\nArrival Delay in Minutes             310\nsatisfaction                           0\ndtype: int64\n</pre> In\u00a0[18]: Copied! <pre>#replace nan in \"Arrival Delay in Minutes\" with 0\ndf[\"Arrival Delay in Minutes\"].fillna(0, inplace=True)\n</pre> #replace nan in \"Arrival Delay in Minutes\" with 0 df[\"Arrival Delay in Minutes\"].fillna(0, inplace=True) <pre>C:\\Users\\Eric\\AppData\\Local\\Temp\\ipykernel_34812\\1611070765.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"Arrival Delay in Minutes\"].fillna(0, inplace=True)\n</pre> In\u00a0[19]: Copied! <pre>df['satisfaction'].value_counts()\n</pre> df['satisfaction'].value_counts() Out[19]: <pre>satisfaction\nneutral or dissatisfied    58879\nsatisfied                  45025\nName: count, dtype: int64</pre> In\u00a0[20]: Copied! <pre>categorical_vars = df.select_dtypes(include=['object']).columns.tolist()\nnumeric_vars = df.select_dtypes(include=['number']).columns.tolist()\n\nprint(\"Categorical variables:\", categorical_vars)\nprint(\"Numeric variables:\", numeric_vars)\n</pre> categorical_vars = df.select_dtypes(include=['object']).columns.tolist() numeric_vars = df.select_dtypes(include=['number']).columns.tolist()  print(\"Categorical variables:\", categorical_vars) print(\"Numeric variables:\", numeric_vars) <pre>Categorical variables: ['Gender', 'Customer Type', 'Type of Travel', 'Class', 'satisfaction']\nNumeric variables: ['id', 'Age', 'Flight Distance', 'Inflight wifi service', 'Departure/Arrival time convenient', 'Ease of Online booking', 'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort', 'Inflight entertainment', 'On-board service', 'Leg room service', 'Baggage handling', 'Checkin service', 'Inflight service', 'Cleanliness', 'Departure Delay in Minutes', 'Arrival Delay in Minutes']\n</pre> In\u00a0[21]: Copied! <pre># process categorical variables to enter a model\ndf = pd.get_dummies(df, columns=categorical_vars, drop_first=True)\n</pre> # process categorical variables to enter a model df = pd.get_dummies(df, columns=categorical_vars, drop_first=True) In\u00a0[22]: Copied! <pre>df.head()\n</pre> df.head() Out[22]: id Age Flight Distance Inflight wifi service Departure/Arrival time convenient Ease of Online booking Gate location Food and drink Online boarding Seat comfort ... Inflight service Cleanliness Departure Delay in Minutes Arrival Delay in Minutes Gender_Male Customer Type_disloyal Customer Type of Travel_Personal Travel Class_Eco Class_Eco Plus satisfaction_satisfied 0 70172 13 460 3 4 3 1 5 3 5 ... 5 5 25 18.0 True False True False True False 1 5047 25 235 3 2 3 3 1 3 1 ... 4 1 1 6.0 True True False False False False 2 110028 26 1142 2 2 2 2 5 5 5 ... 4 5 0 0.0 False False False False False True 3 24026 25 562 2 5 5 5 2 2 2 ... 4 2 11 9.0 False False False False False False 4 119299 61 214 3 3 3 3 4 5 5 ... 3 3 0 0.0 True False False False False True <p>5 rows \u00d7 25 columns</p> In\u00a0[23]: Copied! <pre>scaler = StandardScaler()\ndf[numeric_vars] = scaler.fit_transform(df[numeric_vars])\n</pre> scaler = StandardScaler() df[numeric_vars] = scaler.fit_transform(df[numeric_vars]) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[24]: Copied! <pre>df.to_csv(\"../data/processed_airline_passenger_satisfaction.csv\", index=False)\n</pre> df.to_csv(\"../data/processed_airline_passenger_satisfaction.csv\", index=False) In\u00a0[25]: Copied! <pre>#read csv\ndf = pd.read_csv(\"../data/processed_airline_passenger_satisfaction.csv\")\ndf.head()\n</pre> #read csv df = pd.read_csv(\"../data/processed_airline_passenger_satisfaction.csv\") df.head() Out[25]: id Age Flight Distance Inflight wifi service Departure/Arrival time convenient Ease of Online booking Gate location Food and drink Online boarding Seat comfort ... Inflight service Cleanliness Departure Delay in Minutes Arrival Delay in Minutes Gender_Male Customer Type_disloyal Customer Type of Travel_Personal Travel Class_Eco Class_Eco Plus satisfaction_satisfied 0 0.140077 -1.745279 -0.731539 0.203579 0.616172 0.173776 -1.547323 1.352264 -0.185532 1.183099 ... 1.156436 1.305870 0.266393 0.074169 True False True False True False 1 -1.598276 -0.951360 -0.957184 0.203579 -0.695245 0.173776 0.018094 -1.656326 -0.185532 -1.849315 ... 0.305848 -1.742292 -0.361375 -0.236313 True True False False False False 2 1.203935 -0.885200 -0.047584 -0.549533 -0.695245 -0.541060 -0.764614 1.352264 1.296496 1.183099 ... 0.305848 1.305870 -0.387532 -0.391554 False False False False False True 3 -1.091678 -0.951360 -0.629246 -0.549533 1.271880 1.603448 1.583511 -0.904178 -0.926545 -1.091211 ... 0.305848 -0.980251 -0.099805 -0.158692 False False False False False False 4 1.451402 1.430397 -0.978244 0.203579 -0.039537 0.173776 0.018094 0.600117 1.296496 1.183099 ... -0.544740 -0.218211 -0.387532 -0.391554 True False False False False True <p>5 rows \u00d7 25 columns</p>"},{"location":"projetos/","title":"Index","text":"<p>Este compilado de documenta\u00e7\u00f5es se refere a projetos executados em 2025.2</p>"},{"location":"projetos/classification/","title":"Projeto 1","text":""},{"location":"projetos/classification/#report-airline-passenger-satisfaction-prediction","title":"Report: Airline Passenger Satisfaction Prediction","text":""},{"location":"projetos/classification/#1-dataset-selection","title":"1. Dataset Selection","text":""},{"location":"projetos/classification/#dataset-airline-passenger-satisfaction","title":"Dataset: Airline Passenger Satisfaction","text":"<p>Source: Kaggle</p> <p>URL: https://www.kaggle.com/datasets/teejmahal20/airline-passenger-satisfaction</p> <p>Size: 129,880 passengers x 24 features.</p>"},{"location":"projetos/classification/#reason","title":"Reason:","text":"<p>This dataset presents a highly relevant business problem\u2014predicting customer satisfaction\u2014with sufficient size and complexity (22 input features) to make an MLP model meaningful.</p>"},{"location":"projetos/classification/#2-dataset-explanation","title":"2. Dataset Explanation","text":""},{"location":"projetos/classification/#21-overview-features","title":"2.1. Overview &amp; Features","text":"<p>The dataset contains survey results from airline passengers. The goal is a binary classification: predict if a passenger is \"satisfied\" or \"neutral or dissatisfied\".</p> <p>Target Variable: satisfaction (Categorical)</p> <p>Input Features:</p> <p>Customer &amp; Travel Context: Customer Type (Loyal/Disloyal), Type of Travel, Class, Flight Distance, Delay times.</p> <p>Service Ratings (Numerical, 1-5): Key features include Online boarding, Seat comfort, Inflight wifi/service, Food and drink, and On-board service.</p>"},{"location":"projetos/classification/#22-domain-context","title":"2.2. Domain Context","text":"<p>Understanding the drivers of passenger satisfaction is critical for customer retention and revenue in the competitive airline industry. This model can directly identify key service areas for improvement.</p>"},{"location":"projetos/classification/#23-potential-issues","title":"2.3. Potential Issues","text":"<p>Class Imbalance: The target is skewed (55% \"neutral/dissatisfied\", 45% \"satisfied\").</p> <p>Missing Values: A small number of missing values exist in the Arrival Delay column.</p> <p>Outliers: Numerical features like Delay and Flight Distance may have extreme values that need handling.</p>"},{"location":"projetos/classification/MLP/","title":"MLP","text":"In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre># Tanh activation\ndef tanh(x):\n    return np.tanh(x)\n</pre> # Tanh activation def tanh(x):     return np.tanh(x) In\u00a0[\u00a0]: Copied! <pre># Derivative of tanh with respect to pre-activation z\ndef tanh_derivative(z):\n    return 1.0 - np.tanh(z) ** 2\n</pre> # Derivative of tanh with respect to pre-activation z def tanh_derivative(z):     return 1.0 - np.tanh(z) ** 2 In\u00a0[\u00a0]: Copied! <pre># Sigmoid activation\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n</pre> # Sigmoid activation def sigmoid(x):     return 1 / (1 + np.exp(-x)) In\u00a0[\u00a0]: Copied! <pre># Binary cross-entropy loss (mean over batch/sample)\ndef binary_cross_entropy(y, y_hat):\n    eps = 1e-9\n    return -np.mean(y * np.log(y_hat + eps) + (1 - y) * np.log(1 - y_hat + eps))\n</pre> # Binary cross-entropy loss (mean over batch/sample) def binary_cross_entropy(y, y_hat):     eps = 1e-9     return -np.mean(y * np.log(y_hat + eps) + (1 - y) * np.log(1 - y_hat + eps)) In\u00a0[\u00a0]: Copied! <pre># Data loading and preparation\ncsv_path = \"./docs/data/processed_airline_passenger_satisfaction.csv\"\ndf = pd.read_csv(csv_path)\ntarget_col = \"satisfaction_satisfied\"\n</pre> # Data loading and preparation csv_path = \"./docs/data/processed_airline_passenger_satisfaction.csv\" df = pd.read_csv(csv_path) target_col = \"satisfaction_satisfied\" In\u00a0[\u00a0]: Copied! <pre>if \"id\" in df.columns:\n    df = df.drop(columns=[\"id\"])\n</pre> if \"id\" in df.columns:     df = df.drop(columns=[\"id\"]) In\u00a0[\u00a0]: Copied! <pre>feature_cols = [c for c in df.columns if c != target_col]\n</pre> feature_cols = [c for c in df.columns if c != target_col] In\u00a0[\u00a0]: Copied! <pre>X = df[feature_cols].to_numpy(dtype=float)\ny = df[target_col].to_numpy()\ny = y.reshape(-1, 1)\n</pre> X = df[feature_cols].to_numpy(dtype=float) y = df[target_col].to_numpy() y = y.reshape(-1, 1) In\u00a0[\u00a0]: Copied! <pre>rng = np.random.RandomState(42)\nperm = rng.permutation(X.shape[0])\nsplit = int(0.8 * X.shape[0])\ntrain_idx = perm[:split]\ntest_idx = perm[split:]\n</pre> rng = np.random.RandomState(42) perm = rng.permutation(X.shape[0]) split = int(0.8 * X.shape[0]) train_idx = perm[:split] test_idx = perm[split:] In\u00a0[\u00a0]: Copied! <pre>X_train = X[train_idx]\ny_train = y[train_idx]\nX_test = X[test_idx]\ny_test = y[test_idx]\n</pre> X_train = X[train_idx] y_train = y[train_idx] X_test = X[test_idx] y_test = y[test_idx] In\u00a0[\u00a0]: Copied! <pre>print(f\"Samples: total={X.shape[0]}, train={X_train.shape[0]}, test={X_test.shape[0]}\")\nprint(f\"Features used: {len(feature_cols)}\")\n</pre> print(f\"Samples: total={X.shape[0]}, train={X_train.shape[0]}, test={X_test.shape[0]}\") print(f\"Features used: {len(feature_cols)}\") In\u00a0[\u00a0]: Copied! <pre># Hyperparameters\ninput_dim = X_train.shape[1]\nhidden_dim = 32\noutput_dim = 1\neta = 0.01\nepochs = 20\ninit_rng = np.random.RandomState(42)\n</pre> # Hyperparameters input_dim = X_train.shape[1] hidden_dim = 32 output_dim = 1 eta = 0.01 epochs = 20 init_rng = np.random.RandomState(42) In\u00a0[\u00a0]: Copied! <pre># Parameter initialization (Xavier for tanh)\nW1 = init_rng.randn(hidden_dim, input_dim) / np.sqrt(input_dim)\nb1 = np.zeros((hidden_dim, 1))\nW2 = init_rng.randn(output_dim, hidden_dim) / np.sqrt(hidden_dim)\nb2 = np.zeros((output_dim, 1))\n</pre> # Parameter initialization (Xavier for tanh) W1 = init_rng.randn(hidden_dim, input_dim) / np.sqrt(input_dim) b1 = np.zeros((hidden_dim, 1)) W2 = init_rng.randn(output_dim, hidden_dim) / np.sqrt(hidden_dim) b2 = np.zeros((output_dim, 1)) In\u00a0[\u00a0]: Copied! <pre># Training loop using true SGD (update per sample)\nn_train = X_train.shape[0]\ntrain_losses = []\n</pre> # Training loop using true SGD (update per sample) n_train = X_train.shape[0] train_losses = [] In\u00a0[\u00a0]: Copied! <pre>for epoch in range(epochs):\n    perm = rng.permutation(n_train)\n    X_shuffled = X_train[perm]\n    y_shuffled = y_train[perm]\n\n    total_loss = 0.0\n\n    for i in range(n_train):\n        x_i = X_shuffled[i].reshape(1, -1)\n        y_i = y_shuffled[i].reshape(1, 1)\n\n        Z1 = x_i.dot(W1.T) + b1.T\n        A1 = tanh(Z1)\n        Z2 = A1.dot(W2.T) + b2.T\n        A2 = sigmoid(Z2)\n\n        loss_i = binary_cross_entropy(y_i, A2)\n        total_loss += loss_i\n\n        dZ2 = A2 - y_i\n        dW2 = dZ2.T.dot(A1)\n        db2 = dZ2.T\n        dA1 = dZ2.dot(W2)\n        dZ1 = dA1 * tanh_derivative(Z1)\n        dW1 = dZ1.T.dot(x_i)\n        db1 = dZ1.T\n\n        W2 -= eta * dW2\n        b2 -= eta * db2\n        W1 -= eta * dW1\n        b1 -= eta * db1\n\n    avg_epoch_loss = total_loss / n_train\n    train_losses.append(avg_epoch_loss)\n\n    print(f\"Epoch {epoch+1}/{epochs}  Loss = {avg_epoch_loss:.6f}\")\n</pre> for epoch in range(epochs):     perm = rng.permutation(n_train)     X_shuffled = X_train[perm]     y_shuffled = y_train[perm]      total_loss = 0.0      for i in range(n_train):         x_i = X_shuffled[i].reshape(1, -1)         y_i = y_shuffled[i].reshape(1, 1)          Z1 = x_i.dot(W1.T) + b1.T         A1 = tanh(Z1)         Z2 = A1.dot(W2.T) + b2.T         A2 = sigmoid(Z2)          loss_i = binary_cross_entropy(y_i, A2)         total_loss += loss_i          dZ2 = A2 - y_i         dW2 = dZ2.T.dot(A1)         db2 = dZ2.T         dA1 = dZ2.dot(W2)         dZ1 = dA1 * tanh_derivative(Z1)         dW1 = dZ1.T.dot(x_i)         db1 = dZ1.T          W2 -= eta * dW2         b2 -= eta * db2         W1 -= eta * dW1         b1 -= eta * db1      avg_epoch_loss = total_loss / n_train     train_losses.append(avg_epoch_loss)      print(f\"Epoch {epoch+1}/{epochs}  Loss = {avg_epoch_loss:.6f}\") In\u00a0[\u00a0]: Copied! <pre># Evaluation on test set\nZ1_test = X_test.dot(W1.T) + b1.T\nA1_test = tanh(Z1_test)\nZ2_test = A1_test.dot(W2.T) + b2.T\nA2_test = sigmoid(Z2_test)\ny_pred = (A2_test &gt; 0.5).astype(int)\n</pre> # Evaluation on test set Z1_test = X_test.dot(W1.T) + b1.T A1_test = tanh(Z1_test) Z2_test = A1_test.dot(W2.T) + b2.T A2_test = sigmoid(Z2_test) y_pred = (A2_test &gt; 0.5).astype(int) In\u00a0[\u00a0]: Copied! <pre>accuracy = np.mean(y_pred == y_test)\nprint(f\"\\nTest Accuracy: {accuracy:.4f}\")\n</pre> accuracy = np.mean(y_pred == y_test) print(f\"\\nTest Accuracy: {accuracy:.4f}\") In\u00a0[\u00a0]: Copied! <pre># Plot training loss\nplt.plot(train_losses)\nplt.title(\"Training Loss (SGD per-sample)\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.grid(True)\nplt.show()\n</pre> # Plot training loss plt.plot(train_losses) plt.title(\"Training Loss (SGD per-sample)\") plt.xlabel(\"Epoch\") plt.ylabel(\"Loss\") plt.grid(True) plt.show()"},{"location":"thisdocumentation/","title":"This documentation","text":""},{"location":"thisdocumentation/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, certifique-se de que voc\u00ea possui os seguintes pr\u00e9-requisitos instalados em seu sistema:</p> <ul> <li>Git: Para clonar o reposit\u00f3rio.</li> </ul>"},{"location":"thisdocumentation/#instalando-o-python","title":"Instalando o Python","text":"LinuxmacOSWindows <p>Instale o Python 3.8 ou superior.</p> <pre><code>sudo apt install python3 python3-venv python3-pip\npython3 --version\n</code></pre> <p>Instale o Python 3.8 ou superior.</p> <pre><code>brew install python\npython3 --version\n</code></pre> <p>Instale o Python 3.13 ou superior. Baixe o instalador do site oficial do Python (https://www.python.org/downloads/) e execute-o. Certifique-se de marcar a op\u00e7\u00e3o \"Add Python to PATH\" durante a instala\u00e7\u00e3o.</p> <pre><code>python --version\n</code></pre>"},{"location":"thisdocumentation/#usage","title":"Usage","text":"<p>Para utilizar o c\u00f3digo deste reposit\u00f3rio, siga as instru\u00e7\u00f5es a seguir:</p> <p>Clone ou fork este reposit\u00f3rio:</p> <pre><code>git clone &lt;URL_DO_REPOSITORIO&gt;\n</code></pre> <p>Crie um ambiente virtual do Python:</p> Linux/macOSWindows <pre><code>python3 -m venv env\n</code></pre> <pre><code>python -m venv env\n</code></pre> <p>Ative o ambiente virtual (voc\u00ea deve fazer isso sempre que for executar algum script deste reposit\u00f3rio):</p> Linux/macOSWindows <pre><code>source ./env/bin/activate\n</code></pre> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>Instale as depend\u00eancias com:</p> Linux/macOSWindows <pre><code>python3 -m pip install -r requirements.txt --upgrade\n</code></pre> <pre><code>python -m pip install -r requirements.txt --upgrade\n</code></pre>"},{"location":"thisdocumentation/#deployment","title":"Deployment","text":"<p>O material utiliza o mkdocs para gerar a documenta\u00e7\u00e3o. Para visualizar a documenta\u00e7\u00e3o, execute o comando:</p> <pre><code>mkdocs serve -o\n</code></pre> <p>Para subir ao GitHub Pages, execute o comando:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Esse reposit\u00f3rio possui um workflow do GitHub Actions que executa o comando <code>mkdocs gh-deploy</code> sempre que houver um push na branch <code>main</code>. Assim, n\u00e3o \u00e9 necess\u00e1rio executar esse comando manualmente. Toda vez que voc\u00ea fizer um push na branch <code>main</code>, a documenta\u00e7\u00e3o ser\u00e1 atualizada automaticamente no GitHub Pages.</p> <p>Aviso 1</p> <p>Para que o github actions funcione corretamente, \u00e9 necess\u00e1rio que o reposit\u00f3rio esteja configurado para que o bot <code>github-actions[bot]</code> tenha permiss\u00e3o de escrita. Voc\u00ea pode verificar isso nas configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Actions\" e depois em \"General\". Certifique-se de que a op\u00e7\u00e3o \"Workflow permissions\" esteja definida como \"Read and write permissions\".</p> <p></p> <p>Aviso 2</p> <p>Depois de publicar, caso n\u00e3o consiga acessar a p\u00e1gina, verifique se o github pages est\u00e1 configurado corretamente. V\u00e1 at\u00e9 as configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Pages\" e verifique se a branch <code>gh-pages</code> est\u00e1 selecionada como fonte. Se n\u00e3o estiver, selecione-a e salve as altera\u00e7\u00f5es.</p> <p></p> <p>Pay Attention</p> <p>No arquivo '<code>mkdocs.yml</code>, a se\u00e7\u00e3o <code>site_url</code> deve estar configurada corretamente para o seu reposit\u00f3rio. Por exemplo, se o seu reposit\u00f3rio estiver em <code>https://github.com/usuario/repositorio</code>, a se\u00e7\u00e3o <code>site_url</code> deve ser:</p> <pre><code>site_url: https://usuario.github.io/repositorio\n</code></pre> <p>Tamb\u00e9m, certifique-se de que a se\u00e7\u00e3o <code>repo_url</code> esteja configurada corretamente para o seu reposit\u00f3rio. Por exemplo:</p> <pre><code>repo_url: https://github.com/usuario/repositorio\n</code></pre>"}]}